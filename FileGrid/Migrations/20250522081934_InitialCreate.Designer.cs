// <auto-generated />
using System;
using FileGrid.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FileGrid.Migrations
{
    [DbContext(typeof(FileGridContext))]
    [Migration("20250522081934_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FileGrid.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ContactUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("FileGrid.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProjectGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("FileGrid.Entities.InvitationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UsedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ValidDurationHours")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UsedById");

                    b.ToTable("InvitationCodes");
                });

            modelBuilder.Entity("FileGrid.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("FileGrid.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<Guid?>("DeputyManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartAId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlannedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlannedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProductionLeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectGroupId")
                        .HasColumnType("int");

                    b.Property<Guid?>("SafetyLeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TechnicalLeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DeputyManagerId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PartAId");

                    b.HasIndex("ProductionLeaderId");

                    b.HasIndex("ProjectGroupId");

                    b.HasIndex("SafetyLeaderId");

                    b.HasIndex("TechnicalLeaderId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("FileGrid.Entities.ProjectFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectResourceId")
                        .HasColumnType("int");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectResourceId");

                    b.ToTable("ProjectFiles");
                });

            modelBuilder.Entity("FileGrid.Entities.ProjectOutsource", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("OutsourceId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "OutsourceId");

                    b.HasIndex("OutsourceId");

                    b.ToTable("ProjectOutsources");
                });

            modelBuilder.Entity("FileGrid.Entities.ProjectPartA", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("PartAId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "PartAId");

                    b.HasIndex("PartAId");

                    b.ToTable("ProjectPartAs");
                });

            modelBuilder.Entity("FileGrid.Entities.ProjectResource", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("BasePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinioBucket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.ToTable("ProjectResources");
                });

            modelBuilder.Entity("FileGrid.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BucketName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("FileGrid.Entities.ResourcePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ApplyToSubItems")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GrantTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GrantedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Operations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrincipalTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrincipalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourcePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GrantedById");

                    b.ToTable("ResourcePermissions");
                });

            modelBuilder.Entity("FileGrid.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("FileGrid.Entities.Share", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.Property<string>("ShareLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShareType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ResourceId");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("FileGrid.Entities.ShareResource", b =>
                {
                    b.Property<int>("ShareId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.HasKey("ShareId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ShareResources");
                });

            modelBuilder.Entity("FileGrid.Entities.ShareUser", b =>
                {
                    b.Property<int>("ShareId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShareId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ShareUsers");
                });

            modelBuilder.Entity("FileGrid.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FileGrid.Entities.UserDepartment", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("UserDepartments");
                });

            modelBuilder.Entity("FileGrid.Entities.UserGroupPermissionPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Operations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserGroupPermissionPolicies");
                });

            modelBuilder.Entity("FileGrid.Entities.UserPermission", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("FileGrid.Entities.UserProject", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserProjects");
                });

            modelBuilder.Entity("FileGrid.Entities.UserProjectGroup", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectGroupId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProjectGroupId");

                    b.HasIndex("ProjectGroupId");

                    b.ToTable("UserProjectGroups");
                });

            modelBuilder.Entity("FileGrid.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<Guid>("OtherParticipantsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("OtherParticipantsId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectParticipants", (string)null);
                });

            modelBuilder.Entity("FileGrid.Entities.Company", b =>
                {
                    b.HasOne("FileGrid.Entities.User", "ContactUser")
                        .WithMany()
                        .HasForeignKey("ContactUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ContactUser");
                });

            modelBuilder.Entity("FileGrid.Entities.Department", b =>
                {
                    b.HasOne("FileGrid.Entities.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("FileGrid.Entities.InvitationCode", b =>
                {
                    b.HasOne("FileGrid.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FileGrid.Entities.User", "UsedBy")
                        .WithMany()
                        .HasForeignKey("UsedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("UsedBy");
                });

            modelBuilder.Entity("FileGrid.Entities.Project", b =>
                {
                    b.HasOne("FileGrid.Entities.Department", null)
                        .WithMany("Projects")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("FileGrid.Entities.User", "DeputyManager")
                        .WithMany()
                        .HasForeignKey("DeputyManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FileGrid.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FileGrid.Entities.Company", "PartA")
                        .WithMany()
                        .HasForeignKey("PartAId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FileGrid.Entities.User", "ProductionLeader")
                        .WithMany()
                        .HasForeignKey("ProductionLeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FileGrid.Entities.Department", "ProjectGroup")
                        .WithMany()
                        .HasForeignKey("ProjectGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FileGrid.Entities.User", "SafetyLeader")
                        .WithMany()
                        .HasForeignKey("SafetyLeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FileGrid.Entities.User", "TechnicalLeader")
                        .WithMany()
                        .HasForeignKey("TechnicalLeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DeputyManager");

                    b.Navigation("Manager");

                    b.Navigation("PartA");

                    b.Navigation("ProductionLeader");

                    b.Navigation("ProjectGroup");

                    b.Navigation("SafetyLeader");

                    b.Navigation("TechnicalLeader");
                });

            modelBuilder.Entity("FileGrid.Entities.ProjectFile", b =>
                {
                    b.HasOne("FileGrid.Entities.ProjectResource", "ProjectResource")
                        .WithMany("Files")
                        .HasForeignKey("ProjectResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectResource");
                });

            modelBuilder.Entity("FileGrid.Entities.ProjectOutsource", b =>
                {
                    b.HasOne("FileGrid.Entities.Company", "Outsource")
                        .WithMany("ProjectsOutSources")
                        .HasForeignKey("OutsourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileGrid.Entities.Project", "Project")
                        .WithMany("Outsources")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Outsource");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FileGrid.Entities.ProjectPartA", b =>
                {
                    b.HasOne("FileGrid.Entities.Company", "PartA")
                        .WithMany("ProjectPartAs")
                        .HasForeignKey("PartAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileGrid.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartA");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FileGrid.Entities.ProjectResource", b =>
                {
                    b.HasOne("FileGrid.Entities.Project", "Project")
                        .WithOne("Resource")
                        .HasForeignKey("FileGrid.Entities.ProjectResource", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FileGrid.Entities.Resource", b =>
                {
                    b.HasOne("FileGrid.Entities.User", "Creator")
                        .WithMany("UploadedResources")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("FileGrid.Entities.ResourcePermission", b =>
                {
                    b.HasOne("FileGrid.Entities.User", "GrantedBy")
                        .WithMany()
                        .HasForeignKey("GrantedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GrantedBy");
                });

            modelBuilder.Entity("FileGrid.Entities.Share", b =>
                {
                    b.HasOne("FileGrid.Entities.User", "Owner")
                        .WithMany("Shares")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileGrid.Entities.Resource", null)
                        .WithMany("Shares")
                        .HasForeignKey("ResourceId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FileGrid.Entities.ShareResource", b =>
                {
                    b.HasOne("FileGrid.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FileGrid.Entities.Share", "Share")
                        .WithMany("ShareResources")
                        .HasForeignKey("ShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Share");
                });

            modelBuilder.Entity("FileGrid.Entities.ShareUser", b =>
                {
                    b.HasOne("FileGrid.Entities.Share", "Share")
                        .WithMany("ShareUsers")
                        .HasForeignKey("ShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileGrid.Entities.User", "User")
                        .WithMany("SharedWithMe")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Share");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FileGrid.Entities.User", b =>
                {
                    b.HasOne("FileGrid.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FileGrid.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("FileGrid.Entities.UserDepartment", b =>
                {
                    b.HasOne("FileGrid.Entities.Department", "Department")
                        .WithMany("UserDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileGrid.Entities.User", "User")
                        .WithMany("UserDepartments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FileGrid.Entities.UserPermission", b =>
                {
                    b.HasOne("FileGrid.Entities.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileGrid.Entities.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FileGrid.Entities.UserProject", b =>
                {
                    b.HasOne("FileGrid.Entities.Project", "Project")
                        .WithMany("AuthorizedUsers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileGrid.Entities.User", "User")
                        .WithMany("AccessibleProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FileGrid.Entities.UserProjectGroup", b =>
                {
                    b.HasOne("FileGrid.Entities.Department", "ProjectGroup")
                        .WithMany("AccessibleUsers")
                        .HasForeignKey("ProjectGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileGrid.Entities.User", "User")
                        .WithMany("AccessibleProjectGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FileGrid.Entities.UserRole", b =>
                {
                    b.HasOne("FileGrid.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileGrid.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("FileGrid.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("OtherParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileGrid.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FileGrid.Entities.Company", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("ProjectPartAs");

                    b.Navigation("ProjectsOutSources");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FileGrid.Entities.Department", b =>
                {
                    b.Navigation("AccessibleUsers");

                    b.Navigation("Projects");

                    b.Navigation("UserDepartments");
                });

            modelBuilder.Entity("FileGrid.Entities.Permission", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("FileGrid.Entities.Project", b =>
                {
                    b.Navigation("AuthorizedUsers");

                    b.Navigation("Outsources");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("FileGrid.Entities.ProjectResource", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("FileGrid.Entities.Resource", b =>
                {
                    b.Navigation("Shares");
                });

            modelBuilder.Entity("FileGrid.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FileGrid.Entities.Share", b =>
                {
                    b.Navigation("ShareResources");

                    b.Navigation("ShareUsers");
                });

            modelBuilder.Entity("FileGrid.Entities.User", b =>
                {
                    b.Navigation("AccessibleProjectGroups");

                    b.Navigation("AccessibleProjects");

                    b.Navigation("SharedWithMe");

                    b.Navigation("Shares");

                    b.Navigation("UploadedResources");

                    b.Navigation("UserDepartments");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
