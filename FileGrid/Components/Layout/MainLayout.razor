@using Microsoft.AspNetCore.Authentication
@using System.Security.Claims
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IHostEnvironment HostEnvironment
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <AuthorizeView>
        <Authorized>
            <MudAppBar Elevation="1">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                    OnClick="@((e) => DrawerToggle())" />
                <MudText Typo="Typo.h5" Class="ml-3">File Grid</MudText>
                <MudSpacer />
                <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
                <MudMenu>
                    <ActivatorContent>
                        <MudAvatar Color="Color.Primary">@Avatar</MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Label="个人资料" OnClick="@((e) => { NavigationManager.NavigateTo("/profile"); })" />
                        <MudMenuItem Label="退出登录" OnClick="@Logout" />
                    </ChildContent>
                </MudMenu>
            </MudAppBar>
            <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
                <NavMenu />
            </MudDrawer>
        </Authorized>
    </AuthorizeView>
    <MudMainContent Class="pt-16 pa-4">
        @Body
    </MudMainContent>
    <ErrorBoundary>
        <ErrorContent>
            @if (HostEnvironment.IsDevelopment())
            {
                @context.Message
            }
        </ErrorContent>
    </ErrorBoundary>
</MudLayout>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;
    private string Avatar = string.Empty;
    protected async override Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            if (authState != null)
            {
                var user = (authState)?.User;
                if (user is not null && user.Identity?.IsAuthenticated == true)
                {
                    @* NavigationManager.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}"); *@
                    var temp = user.FindFirst(ClaimTypes.Name)?.Value ?? user.FindFirst(ClaimTypes.Email)?.Value ?? "U";
                    if (!string.IsNullOrEmpty(temp))
                    {
                        Avatar = temp.Substring(0, 1).ToUpperInvariant();
                    }
                }
            }

            _theme = new()
            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };
        }
        catch (NavigationException ex)
        {

        }
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    private void Logout()
    {
        NavigationManager.NavigateTo("/account/logout", true);
    }
}