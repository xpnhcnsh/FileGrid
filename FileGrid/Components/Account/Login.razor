@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using FileGrid.Entities
@using FileGrid.Entities.Dto
@using FileGrid.Services.Interface
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject FileGridContext FileGridContext
@inject IAuthService AuthService

<MudPaper Class="mx-auto mt-12 pa-4" Elevation="5" Style="max-width:600px;">
    <MudGrid Justify="Justify.Center">
        <MudItem lg="9">
            <MudText Typo="Typo.h3" Align="Align.Center" Class="my-4">File Grid</MudText>
            <EditForm Model=@Input OnValidSubmit="SignInAsync" FormName="LoginForm">
                <DataAnnotationsValidator />
                <MudStaticTextField @bind-Value="@Input.Email" name="Input.Email" Label="邮箱" For="@(() => Input.Email)"
                    FullWidth="true" Class="mb-4" Required="true" Adornment="Adornment.End"
                    AdornmentIcon="@Icons.Material.Outlined.Email" />
                <MudStaticTextField @bind-Value="@Input.Password" name="Input.Password" Label="密码"
                    For="@(() => Input.Password)" Variant="Variant.Text" InputType="InputType.Password" FullWidth="true"
                    Class="mb-4" Required="true" Adornment="Adornment.End"
                    AdornmentIcon="@Icons.Material.Outlined.Visibility"
                    AdornmentToggledIcon="@Icons.Material.Outlined.VisibilityOff"
                    AdornmentClickFunction="showPassword" />
                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Spacing="2">
                    <MudStaticSwitch Label="记住我" @bind-Value="Input.RememberMe" Color="Color.Primary"
                        Typo="Typo.body2" />
                    <MudLink Href="Account/ForgotPassword" Justify="Justify.Center" Typo="Typo.body2"
                        Color="Color.Primary">
                        <b>Forgot password?</b>
                    </MudLink>
                </MudStack>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Class="mt-4"
                    FullWidth="true">
                    LogIn
                </MudButton>
            </EditForm>
        </MudItem>
        <MudItem>
            <MudStack Class="mb-4" Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
                <MudText Typo="Typo.body2">还没有账户？</MudText>
                <MudLink Href="/Account/Register" Typo="Typo.body2" Color="Color.Primary"><b>注册</b>
                </MudLink>
            </MudStack>
        </MudItem>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Class="my-3" Color="Color.Error">@errorMessage</MudAlert>
        }
    </MudGrid>
</MudPaper>

@code {

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "LoginForm")]
    private InputModel Input { get; set; } = new InputModel();
    private string errorMessage = string.Empty;

    private async Task SignInAsync()
    {
        try
        {
            var user = await FileGridContext.Users.FirstOrDefaultAsync(x => x.Email == Input.Email);
            if (user == null)
            {
                errorMessage = "用户不存在";
                return;
            }
            else if (!AuthService.VerifyPassword(Input.Password, user.PasswordHash))
            {
                errorMessage = "密码错误";
                return;
            }
            var claims = new List<Claim>
{
new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
new Claim(ClaimTypes.Email, Input.Email),
new Claim(ClaimTypes.Role, user.UserGroup.ToString())
};

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);

            var authProperties = new AuthenticationProperties
            {
                IsPersistent = Input.RememberMe,
                ExpiresUtc = DateTimeOffset.UtcNow.Add(
            Input.RememberMe ? TimeSpan.FromDays(30) : TimeSpan.FromMinutes(30)),
                AllowRefresh = true
            };

            await HttpContext.SignInAsync(
            CookieAuthenticationDefaults.AuthenticationScheme,
            principal,
            authProperties);

            Navigation.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            if (ex.Message.Equals("Exception of type 'Microsoft.AspNetCore.Components.NavigationException' was thrown."))
            {
                throw;
            }
            else
            {
                errorMessage = "Login failed: " + ex.Message;
            }
        }
    }

    private void Register()
    {
        if (HttpContext.User?.Identity?.IsAuthenticated == false)
        {
            Navigation.NavigateTo("/Account/register");
        }
        else
        {
            Navigation.NavigateTo("/", true);
        }
    }

    private void ForgotPassword()
    {

    }

    public sealed class InputModel
    {
        [Required(ErrorMessage = "Email cannot be empty")]
        [EmailAddress(ErrorMessage = "Invalid Email")]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password cannot be empty")]
        [DataType(DataType.Password)]
        [StringLength(20, MinimumLength = 1, ErrorMessage = "1-20 length")]
        public string Password { get; set; } = string.Empty;
        public bool RememberMe { get; set; } = true;
    }
}

<script>
    let timeoutId;
    function showPassword(inputElement, button) {
        if (inputElement.type === 'password') {
            inputElement.type = 'text';
            clearTimeout(timeoutId);
            timeoutId = setTimeout(function () {
                inputElement.type = 'password';
            }, 5000);
        } else {
            inputElement.type = 'password';
            clearTimeout(timeoutId);
        }
    }
</script>