@page "/Account/Register"
@using System.ComponentModel.DataAnnotations
@using FileGrid.Entities.Dto
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@inject NavigationManager Navigation

<MudPaper Class="mx-auto mt-12 pa-4" Elevation="5" Style="max-width:600px;">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="7">
            <MudText Typo="Typo.h3" Align="Align.Center" Class="my-4">File Grid</MudText>
            <EditForm Model=@Input OnValidSubmit="RegisterAsync" FormName="RegisterForm">
                <DataAnnotationsValidator />
                <MudStaticTextField @bind-Value="@Input.Email" name="Input.Email" Label="Email"
                    For="@(() => Input.Email)" FullWidth="true" Class="mb-4" Required="true" Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Outlined.Email" />
                <MudStaticTextField @bind-Value="@Input.Password" name="Input.Password" Label="Password"
                    For="@(() => Input.Password)" Variant="Variant.Text" InputType="InputType.Password" FullWidth="true"
                    Class="mb-4" Required="true" Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Outlined.Lock" />
                <MudStaticTextField @bind-Value="@Input.ConfirmPassword" name="Input.ConfirmPassword"
                    Label="ConfirmPassword" For="@(() => Input.ConfirmPassword)" Variant="Variant.Text"
                    InputType="InputType.Password" FullWidth="true" Class="mb-4" Required="true"
                    Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Outlined.Lock" />
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Class="mt-4"
                    FullWidth="true">
                    Register
                </MudButton>
            </EditForm>
        </MudItem>
        <MudItem>
            <MudStack Class="mb-4" Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
                <MudText Typo="Typo.body2">Don't have an account?</MudText>
                <MudLink Href="/Account/Register" Typo="Typo.body2" Color="Color.Primary"><b>Create an
                        account</b>
                </MudLink>
            </MudStack>
        </MudItem>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Class="my-3" Color="Color.Error">@errorMessage</MudAlert>
        }
    </MudGrid>
</MudPaper>

@code {

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "RegisterForm")]
    private InputModel Input { get; set; } = new InputModel();
    private string errorMessage = string.Empty;

    private void RegisterAsync()
    {
        if (HttpContext.User?.Identity?.IsAuthenticated == false)
        {
            Navigation.NavigateTo("/Account/register");
        }
        else
        {
            Navigation.NavigateTo("/", true);
        }
    }

    public sealed class InputModel
    {
        [Required(ErrorMessage = "Email cannot be empty")]
        [EmailAddress(ErrorMessage = "Invalid Email")]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password cannot be empty")]
        [DataType(DataType.Password)]
        [StringLength(20, MinimumLength = 3, ErrorMessage = "1-20 length")]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}

<script>
    let timeoutId;

    function showPassword(inputElement, button) {
        if (inputElement.type === 'password') {
            inputElement.type = 'text';
            clearTimeout(timeoutId);
            timeoutId = setTimeout(function () {
                inputElement.type = 'password';
            }, 5000);
        } else {
            inputElement.type = 'password';
            clearTimeout(timeoutId);
        }
    }
</script>