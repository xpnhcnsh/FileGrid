@page "/projects"
@attribute [Authorize]
@using FileGrid.Components.Dialogs
@using FileGrid.Entities
@using FileGrid.Services.Interface
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IProjectService ProjectService
@inject ICompanyService CompanyService
@inject IUserService UserService
@inject ISnackbar Snackbar

<MudPaper Class="p-4">
    <MudTabs @bind-ActivePanelIndex="_activeTabIndex">
        <MudTabPanel Text="项目列表">
            <MudStack Direction="Row" Class="mb-4 justify-between items-center">
                <MudTextField @bind-Value="_searchText" Placeholder="搜索项目名称..." Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search" Class="w-1/3" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCreateProjectDialog">新建项目
                </MudButton>
            </MudStack>

            <MudTable Items="_filteredProjects" Hover="true">
                <HeaderContent>
                    <MudTh>项目名称</MudTh>
                    <MudTh>项目经理</MudTh>
                    <MudTh>甲方公司</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudLink OnClick="() => OpenProjectDetails(context)">@context.Name</MudLink>
                    </MudTd>
                    <MudTd>
                        @if (context.Manager is not null)
                        {
                            <MudLink OnClick="() => ShowUserInfo(context.Manager)">@context.Manager.Name</MudLink>
                        }
                    </MudTd>
                    <MudTd>
                        @if (context.PartA is not null)
                        {
                            <MudLink OnClick="() => ShowCompanyInfo(context.PartA)">@context.PartA.Name</MudLink>
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudTabPanel>

        @foreach (var project in _projectTabs)
        {
            <MudTabPanel Text="@project.Name">
                <MudStack>
                    <MudText Typo="Typo.h6">@project.Name</MudText>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit"
                        OnClick="() => OpenEditDialog(project)">编辑</MudButton>
                </MudStack>
            </MudTabPanel>
        }
    </MudTabs>
</MudPaper>

@code {
    private string _searchText = string.Empty;
    private List<Project> _projects = [];
    private List<Project> _projectTabs = [];
    private int _activeTabIndex = 0;

    private IEnumerable<Project> _filteredProjects => _projects
    .Where(p => string.IsNullOrWhiteSpace(_searchText) || p.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        _projects = await ProjectService.GetAllProjectsAsync();
    }

    private void OpenProjectDetails(Project project)
    {
        if (!_projectTabs.Contains(project))
        {
            _projectTabs.Add(project);
        }
        _activeTabIndex = _projectTabs.IndexOf(project) + 1;
    }

    private async Task ShowUserInfo(User user)
    {
        await DialogService.ShowMessageBox("用户信息", $"姓名: {user.Name}\n邮箱: {user.Email}");
    }

    private async Task ShowCompanyInfo(Company company)
    {
        await DialogService.ShowMessageBox("公司信息", $"公司名称: {company.Name}\n地址: {company.Address}");
    }

    private async Task OpenCreateProjectDialog()
    {
        var parameters = new DialogParameters { };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<CreateProjectDialog>("新建项目", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled && (bool)result.Data == true)
        {
            Snackbar.Add("添加项目成功", Severity.Success);
            _projects = await ProjectService.GetAllProjectsAsync();
        }
    }

    private async Task OpenEditDialog(Project project)
    {
        var parameters = new DialogParameters { ["Project"] = project };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium };
        await DialogService.ShowMessageBox("编辑功能", "此处为编辑对话框（待实现具体内容）");
    }

    private async Task<IEnumerable<Company>> SearchPartAsWrapper(string partAname, CancellationToken _)
    {
        if (string.IsNullOrWhiteSpace(partAname))
        {
            return await CompanyService.GetAllPartACompaniesAsync();
        }
        return await CompanyService.GetPartAsByNameAsync(partAname);
    }

    private async Task<IEnumerable<Company>> SearchOutSourcesWrapper(string outSourceName, CancellationToken _)
    {
        if (string.IsNullOrWhiteSpace(outSourceName))
        {
            return await CompanyService.GetAllOutSourceCompaniesAsync();
        }
        return await CompanyService.GetPartAsByNameAsync(outSourceName);
    }

    private async Task<IEnumerable<User>> SearchCCTEGEmployeesWrapper(string userName, CancellationToken _)
    {
        if (string.IsNullOrWhiteSpace(userName))
        {
            return await UserService.GetCCTEGEmployeesAsync();
        }
        return await UserService.GetCCTEGEmployeeByNameAsync(userName);
    }
}
