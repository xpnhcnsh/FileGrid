@page "/projects"
@attribute [Authorize]

@using FileGrid.Components.Dialogs
@using FileGrid.Components.Tabs
@using FileGrid.Entities
@using FileGrid.Services.Interface
@using MudBlazor

@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IProjectService ProjectService
@inject ICompanyService CompanyService
@inject IUserService UserService
@inject ISnackbar Snackbar

<MudPaper Class="p-4">
    <MudDynamicTabs @ref="_dynamicTabs" KeepPanelsAlive="true" ShowCloseIcon="true"
        @bind-ActivePanelIndex="_activePanelIndex" CloseTab="OnTabClosed">

        <MudTabPanel Text="项目列表" Icon="@Icons.Material.Filled.ViewList" CanClose="false" ShowCloseIcon="false">
            <MudStack Direction="Row" Class="mb-4 justify-between items-center">
                <MudTextField @bind-Value="_searchText" Placeholder="搜索项目名称..." Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search" Class="w-1/3" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCreateProjectDialog">新建项目
                </MudButton>
            </MudStack>

            <MudTable Items="_filteredProjects" Hover="true">
                <HeaderContent>
                    <MudTh>项目名称</MudTh>
                    <MudTh>项目组</MudTh>
                    <MudTh>项目经理</MudTh>
                    <MudTh>甲方公司</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudLink OnClick="() => OpenProjectTab(context)">@context.Name</MudLink>
                    </MudTd>
                    <MudTd>
                        <MudLink>@context.ProjectGroup?.Name</MudLink>
                    </MudTd>
                    <MudTd>
                        @if (context.Manager is not null)
                        {
                            <MudLink OnClick="() => ShowUserInfo(context.Manager)">@context.Manager.Name</MudLink>
                        }
                    </MudTd>
                    <MudTd>
                        @if (context.PartA is not null)
                        {
                            <MudLink OnClick="() => ShowCompanyInfo(context.PartA)">@context.PartA.Name</MudLink>
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudTabPanel>

        @foreach (var project in _openProjects)
        {
            <MudTabPanel Text="@project.Name" Icon="@Icons.Material.Filled.AlignVerticalTop" CanClose="true">
                <ProjectDetailTab Project="@project" />
            </MudTabPanel>
        }
    </MudDynamicTabs>
</MudPaper>

@code {
    private string _searchText = string.Empty;
    private List<Project> _projects = [];
    private MudDynamicTabs _dynamicTabs;
    private int _activePanelIndex = 0;

    private List<Project> _openProjects = new();

    private IEnumerable<Project> _filteredProjects => _projects
    .Where(p => string.IsNullOrWhiteSpace(_searchText) || p.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        _projects = await ProjectService.GetAllProjectsAsync();
    }

    private void OpenProjectTab(Project project)
    {
        // 若已存在同名项目 tab，不重复添加，仅切换
        var existingIndex = _openProjects.FindIndex(p => p.Name == project.Name);
        if (existingIndex >= 0)
        {
            _activePanelIndex = existingIndex + 1; // +1 是因为第一个 tab 是项目列表
            return;
        }

        _openProjects.Add(project);
        _activePanelIndex = _openProjects.Count;
    }

    private void OnTabClosed(MudTabPanel closedTab)
    {
        var closedName = closedTab.Text;
        var index = _openProjects.FindIndex(p => p.Name == closedName);
        if (index >= 0)
        {
            _openProjects.RemoveAt(index);
        }
        _activePanelIndex = 0;
    }

    private async Task ShowUserInfo(User user)
    {
        await DialogService.ShowMessageBox("用户信息", $"姓名: {user.Name}\n邮箱: {user.Email}");
    }

    private async Task ShowCompanyInfo(Company company)
    {
        await DialogService.ShowMessageBox("公司信息", $"公司名称: {company.Name}\n地址: {company.Address}");
    }

    private async Task OpenCreateProjectDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<CreateProjectDialog>("新建项目", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is bool success && success)
        {
            Snackbar.Add("添加项目成功", Severity.Success);
            _projects = await ProjectService.GetAllProjectsAsync();
        }
    }
}
