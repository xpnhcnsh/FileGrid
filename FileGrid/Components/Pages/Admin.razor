@page "/Admin"
@using FileGrid.Components.Dialogs
@using FileGrid.Entities
@using FileGrid.Services
@using FileGrid.Services.Interface
@using FileGrid.Utils
@using System.Security.Claims
@using System.Reflection
@using System.ComponentModel
@using FileGrid.Utils.Enum
@attribute [Authorize(Roles = "God,CCTEGL0,CCTEGL1")]
@inject AuthenticationStateProvider AuthProvider
@inject IInvitationCodeService InvitationCodeService
@inject ICompanyService CompanyService
@inject IDialogService DialogService

@inject ISnackbar Snackbar

<MudTabs Class="mt-4">
    <MudTabPanel Text="邀请码">
        <MudPaper Class="mt-10 elevation-4 pa-4">
            <MudGrid Class="flex justify-center align-center">
                <MudItem xs="12" sm="4" md="3">
                    <MudSelect T="UserGroup" @bind-Value="_selectedUserGroup" Label="用户组" Variant="Variant.Outlined"
                        HelperText="@($"用户组权限：{GetGroupDescription(_selectedUserGroup)}")">
                        @foreach (var group in Enum.GetValues<UserGroup>().Where(g => g != UserGroup.God))
                        {
                            <MudSelectItem Value="@group">@group.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="4" md="3">
                    <MudSelect T="string" @bind-Value="_selectedDuration" Label="有效期" Variant="Variant.Outlined"
                        HelperText="邀请码有效期">
                        @foreach (var duration in _durationOptions.Keys)
                        {
                            <MudSelectItem Value="@duration">@duration</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="4" md="3" Class="d-flex justify-center mt-sm-0">
                    <MudButton Variant=" Variant.Filled" Color="Color.Primary" OnClick="CreateInviteCode">
                        新建邀请码
                    </MudButton>
                </MudItem>
            </MudGrid>

            <MudTable Items="_invitationCodes" Hover="true" Class="mt-4">
                <HeaderContent>
                    <MudTh>邀请码</MudTh>
                    <MudTh>用户组</MudTh>
                    <MudTh>状态</MudTh>
                    <MudTh>过期时间</MudTh>
                    <MudTh>创建者邮箱</MudTh>
                    <MudTh>使用者邮箱</MudTh>
                    <MudTh>操作</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Code</MudTd>
                    <MudTd>@context.UserGroup</MudTd>
                    <MudTd>
                        <MudChip T="string" Color="@GetStatusColor(context)" Variant="Variant.Filled">
                            @GetStatusText(context)
                        </MudChip>
                    </MudTd>
                    <MudTd>@context.ExpiredAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</MudTd>
                    <MudTd>@context.Creator?.Email</MudTd>
                    <MudTd>@context.UsedBy?.Email</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                            OnClick="@(() => DeleteInviteCode(context.Id))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudTabPanel>

    <MudTabPanel Text="公司管理">
        <MudPaper Class="mt-10 elevation-4 pa-4">
            <!-- 搜索 + 添加 -->
            <MudGrid Gutter="2" Class="flex justify-center">
                <MudItem xs="12" sm="8" md="6" Class="d-flex justify-center">
                    <MudTextField @bind-Value="_searchTerm" Placeholder="输入公司名称后按回车" Adornment="Adornment.Start"
                        AdornmentIcon="@Icons.Material.Filled.Search"
                        OnKeyUp="@(e => { if (e.Key == "Enter") SearchCompanies(); })" Immediate="true" Class="w-100" />
                </MudItem>
                <MudItem xs="12" sm="4" md="6" Class="d-flex justify-center mt-sm-0">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenAddCompanyDialogAsync">
                        添加公司
                    </MudButton>
                </MudItem>
            </MudGrid>

            <!-- 公司列表 -->
            <MudTable Items="_filteredCompanies" Hover="true" Elevation="0" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>公司名称</MudTh>
                    <MudTh>税号</MudTh>
                    <MudTh>类型</MudTh>
                    <MudTh>操作</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="公司名称">@context.Name</MudTd>
                    <MudTd DataLabel="税号">@context.TaxCode</MudTd>
                    <MudTd DataLabel="类型">@context.Type</MudTd>
                    <MudTd DataLabel="操作">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                            OnClick="@(() => DeleteCompany(context.Id))" />
                    </MudTd>
                </RowTemplate>

                <ChildRowContent Context="company">
                    <MudPaper Class="pa-4">
                        <MudStack Row="true" Class="mb-2">
                            <MudText Typo="Typo.subtitle1">部门列表</MudText>
                            <MudButton Size="Size.Small" OnClick="@(() => OpenAddDepartment(company))">
                                添加部门
                            </MudButton>
                        </MudStack>
                        <MudTable Items="company.Departments" Dense="true">
                            <HeaderContent>
                                <MudTh>部门 ID</MudTh>
                                <MudTh>部门名称</MudTh>
                                <MudTh>描述</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="部门 ID">@context.Id</MudTd>
                                <MudTd DataLabel="部门名称">@context.Name</MudTd>
                                <MudTd DataLabel="描述">@context.Description</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                </ChildRowContent>
            </MudTable>
        </MudPaper>
    </MudTabPanel>
</MudTabs>

@code {

    #region InvitationCode管理
    private List<InvitationCode> _invitationCodes = new();
    private UserGroup _selectedUserGroup = UserGroup.CCTEGL0;
    private string _selectedDuration = "1天";
    private Guid _currentUserId;
    private readonly Dictionary<string, TimeSpan> _durationOptions = new()
{
{ "1小时", TimeSpan.FromHours(1) },
{ "1天", TimeSpan.FromDays(1) },
{ "1周", TimeSpan.FromDays(7) },
{ "永久", TimeSpan.FromDays(365 * 100) } // 100年视为永久
};
    #endregion

    #region Company管理
    private string _searchTerm = "";
    private List<Company> _allCompanies = new();
    private IEnumerable<Company> _filteredCompanies =>
    string.IsNullOrWhiteSpace(_searchTerm)
    ? _allCompanies
    : _allCompanies.Where(c => c.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
    #endregion

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out var userId))
        {
            _currentUserId = userId;
        }
        await LoadInvitationCodesAsync();
        await LoadCompaniesAsync();
    }

    #region InvitationCode方法
    private async Task LoadInvitationCodesAsync()
    {
        var codes = await InvitationCodeService.GetAllInvitationCodesAsync();
        _invitationCodes = codes.OrderByDescending(c => c.ExpiredAt).ThenBy(c => c.IsUsed).ToList();
    }

    private async Task CreateInviteCode()
    {
        if (!_durationOptions.TryGetValue(_selectedDuration, out var duration))
        {
            Snackbar.Add("请选择有效的有效期选项。", Severity.Error);
            return;
        }

        var code = await InvitationCodeService.GenerateInviteCodeAsync(_selectedUserGroup, duration, _currentUserId);
        Snackbar.Add($"邀请码已生成：{code}", Severity.Success);
        await LoadInvitationCodesAsync();
    }

    private async Task DeleteInviteCode(int id)
    {
        var result = await InvitationCodeService.DeleteInviteCodeAsync(id);
        if (result)
        {
            Snackbar.Add("邀请码已删除。", Severity.Success);
            await LoadInvitationCodesAsync();
        }
        else
        {
            Snackbar.Add("删除邀请码失败。", Severity.Error);
        }
    }

    private Color GetStatusColor(InvitationCode code)
    {
        if (code.IsUsed) return Color.Error;
        return code.ExpiredAt > DateTime.UtcNow ? Color.Success : Color.Warning;
    }

    private string GetStatusText(InvitationCode code)
    {
        if (code.IsUsed) return "已使用";
        return code.ExpiredAt > DateTime.UtcNow ? "有效" : "已过期";
    }

    // 通过 DescriptionAttribute 获取枚举说明
    private static string GetGroupDescription(UserGroup group)
    {
        var member = typeof(UserGroup).GetMember(group.ToString()).FirstOrDefault();
        var desc = member?.GetCustomAttribute<DescriptionAttribute>()?.Description;
        return desc ?? "无说明";
    }
    #endregion

    #region Company方法
    private async Task LoadCompaniesAsync()
    {
        _allCompanies = (await CompanyService.GetAllCompaniesAsync())
        .OrderBy(c => c.Name)
        .ToList();
    }

    private void SearchCompanies()
    {
        // 由于绑定了 _searchTerm 和 FilteredCompanies，这里只需 StateHasChanged
        StateHasChanged();
    }

    private async Task OpenAddCompanyDialogAsync()
    {
        var parameters = new DialogParameters { ["Company"] = new Company() };
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddCompanyDialog>("添加新公司", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is Company newCompany)
        {
            var res = await CompanyService.AddCompanyAsync(newCompany);
            if (res != null)
            {
                await LoadCompaniesAsync();
                StateHasChanged();
                Snackbar.Add($"\"{res.Name}\"已成功保存", Severity.Success);
            }
            else
            {
                Snackbar.Add($"\"{newCompany.Name}\"保存失败", Severity.Error);
            }
        }
    }

    private async Task DeleteCompany(int id)
    {
        var ok = await CompanyService.DeleteCompanyByIdAsync(id);
        if (ok)
        {
            Snackbar.Add("公司已删除", Severity.Success);
            _allCompanies.RemoveAll(c => c.Id == id);
        }
        else
        {
            Snackbar.Add("删除失败", Severity.Error);
        }
        StateHasChanged();
    }

    private async Task OpenAddDepartment(Company company)
    {
        var parameters = new DialogParameters
        {
            ["CompanyId"] = company.Id,
            ["Department"] = new Department()
        };
        var options = new DialogOptions { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddDepartmentDialog>("添加部门", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is Department newDept)
        {
            newDept.CompanyId = company.Id;
            var saved = await CompanyService.AddDepartmentAsync(newDept);
            company.Departments.Add(saved);
            Snackbar.Add("部门已添加", Severity.Success);
            StateHasChanged();
        }
    }
    #endregion

}
