@page "/profile"
@attribute [Authorize]

@using FileGrid.Entities
@using FileGrid.Services.Interface
@using Microsoft.AspNetCore.Components.Web
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IUserService UserService
@inject ICompanyService CompanyService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4 mt-12 pa-sm-4">
    @if (_user == null)
    {
        <div class="d-flex justify-center my-8">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </div>
    }
    else
    {
        <MudCard Class="elevation-1 elevation-sm-3 ">
            <MudCardHeader Class="d-flex flex-column flex-sm-row align-center">
                <MudAvatar Size="@(_isMobile? Size.Medium: Size.Large)" Color="Color.Primary"
                    Class="mb-2 mt-2 mb-sm-0 mr-sm-4">
                    @(_avatar)
                </MudAvatar>
                <div class="d-flex flex-row align-center align-sm-start">
                    @if (!_editMode)
                    {
                        <MudText Typo="@(_isMobile? Typo.h5: Typo.h3)" Class="text-center text-sm-left">
                            @(string.IsNullOrEmpty(_user.Name) ? "无名" : _user.Name)
                        </MudText>
                    }
                    else
                    {
                        <MudTextField @bind-Value="_editUser.Name" Label="姓名" FullWidth="true" Margin="Margin.Dense" />
                    }
                    <MudChip Class="ml-2" T="string" Color="Color.Secondary" Variant="Variant.Text"
                        Size="@(_isMobile ? Size.Small : Size.Medium)">
                        @($"用户组：{_user.UserGroup}")
                    </MudChip>
                </div>
                <div class="ml-auto">
                    @if (!_editMode)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="EnableEdit" />
                    }
                    else
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Check" Color="Color.Success" OnClick="SaveAsync" />
                        <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" OnClick="CancelEdit" />
                    }
                </div>
            </MudCardHeader>

            <MudCardContent>
                <MudGrid Spacing="3">
                    <!-- 基本信息 -->
                    <MudItem xs="12" sm="6" Class="order-2 order-sm-1">
                        <MudPaper Elevation="0" Class="pa-3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Primary" Class="mb-3">
                                基本信息
                            </MudText>
                            <MudList T="string">
                                <!-- 邮箱项 -->
                                <MudListItem Class="py-1"> 
                                    <div class="d-flex flex-column">
                                        <div class="d-flex align-items-center flex-nowrap">
                                            <MudIcon Icon="@Icons.Material.Filled.Email"
                                                Size="@(_isMobile ? Size.Small : Size.Medium)" Class="mr-2" />
                                            <MudText Typo="Typo.subtitle1" Class="mr-2">邮箱</MudText>
                                        </div>
                                        @if (!_editMode)
                                        {
                                            <MudText Typo="Typo.subtitle1">
                                                @(_user.Email ?? "未设置")
                                            </MudText>
                                        }
                                        else
                                        {
                                            <MudTextField @bind-Value="_editUser.Email" FullWidth="true"
                                                Margin="Margin.Dense" />
                                        }
                                    </div>
                                </MudListItem>

                                <!-- 联系电话项 -->
                                <MudListItem Class="py-1"> 
                                    <div class="d-flex flex-column">
                                        <div class="d-flex align-items-center flex-nowrap">
                                            <MudIcon Icon="@Icons.Material.Filled.Phone"
                                                Size="@(_isMobile ? Size.Small : Size.Medium)" Class="mr-2" />
                                            <MudText Typo="Typo.subtitle1" Class="mr-2">电话</MudText>
                                        </div>
                                        @if (!_editMode)
                                        {
                                            <MudText Typo="Typo.subtitle1">
                                                @(_user.PhoneNumber ?? "未设置")
                                            </MudText>
                                        }
                                        else
                                        {
                                            <MudTextField @bind-Value="_editUser.PhoneNumber" FullWidth="true"
                                                Margin="Margin.Dense" />
                                        }
                                    </div>
                                </MudListItem>
                            </MudList>
                        </MudPaper>
                    </MudItem>

                    <!-- 组织信息 -->
                    <MudItem xs="12" sm="6" Class="order-1 order-sm-2 mb-4 mb-sm-0">
                        <MudPaper Elevation="0" Class="pa-3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Primary" Class="mb-3">
                                组织信息
                            </MudText>
                            <MudList T="string">
                                <MudListItem Class="py-1"> 
                                    <div class="d-flex flex-column">
                                        <div class="d-flex align-items-center flex-nowrap">
                                            <MudIcon Icon="@Icons.Material.Filled.Business"
                                                Size="@(_isMobile ? Size.Small : Size.Medium)" Class="mr-2" />
                                            <MudText Typo="Typo.subtitle1" Class="mr-2">公司</MudText>
                                        </div>
                                        @if (!_editMode)
                                        {
                                            <MudText Typo="Typo.subtitle1">
                                                @(_user.Company?.Name ?? "未设置")
                                            </MudText>
                                        }
                                        else
                                        {
                                            <MudAutocomplete T="Company" Label="公司" @bind-Value="_editUser.Company"
                                                SearchFunc="SearchCompaniesAsync" ToStringFunc="@(c => c?.Name)"
                                                ItemSelected="OnCompanySelected" Dense="true" Margin="Margin.Dense"
                                                Clearable="true" />
                                        }
                                    </div>
                                </MudListItem>

                                <MudListItem Class="py-1"> 
                                    <div class="d-flex flex-column">
                                        <div class="d-flex align-items-center flex-nowrap">
                                            <MudIcon Icon="@Icons.Material.Filled.AccountTree"
                                                Size="@(_isMobile ? Size.Small : Size.Medium)" Class="mr-2" />
                                            <MudText Typo="Typo.subtitle1" Class="mr-2">部门</MudText>
                                        </div>
                                        @if (!_editMode)
                                        {
                                            <MudText Typo="Typo.subtitle1">
                                                @(_user.Department?.Name ?? "未设置")
                                            </MudText>
                                        }
                                        else
                                        {
                                            <MudAutocomplete T="Department" Label="部门" @bind-Value="_editUser.Department"
                                                SearchFunc="SearchDepartmentsAsync" ToStringFunc="@(d => d?.Name)" Dense="true"
                                                Margin="Margin.Dense" Clearable="true" />
                                        }
                                    </div>
                                </MudListItem>

                                <MudListItem Class="py-1"> 
                                    <div class="d-flex flex-column">
                                        <div class="d-flex align-items-center flex-nowrap">
                                            <MudIcon Icon="@Icons.Material.Filled.Work"
                                                Size="@(_isMobile ? Size.Small : Size.Medium)" Class="mr-2" />
                                            <MudText Typo="Typo.subtitle1" Class="mr-2">职务</MudText>
                                        </div>
                                        @if (!_editMode)
                                        {
                                            <MudText Typo="Typo.subtitle1">
                                                @(_user.JobTitle ?? "未设置")
                                            </MudText>
                                        }
                                        else
                                        {
                                            <MudTextField @bind-Value="_editUser.JobTitle" FullWidth="true"
                                                Margin="Margin.Dense" />
                                        }
                                    </div>
                                </MudListItem>
                            </MudList>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    }
</MudContainer>



@code {
    @inject FileGridContext _context
    private bool _editMode = false;
    private User _user = null!;
    private User _editUser = null!;
    private bool _isMobile;
    private string? _avatar = "U";
    public Guid Id { get; } = Guid.NewGuid();
    private List<Company> _companyList = new();
    private List<Department> _departmentList = new();
    private List<Department> _filteredDepartments = new();

    protected override async Task OnInitializedAsync()
    {
        var userId = (await AuthStateProvider.GetAuthenticationStateAsync()).User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (userId != null)
        {
            var res = await UserService.GetUserByIdAsync(Guid.Parse(userId));
            if (res != null)
            {
                _user = res;
                string? temp = !string.IsNullOrEmpty(_user.Name) ? _user.Name.FirstOrDefault().ToString().ToUpperInvariant() :
                (!string.IsNullOrEmpty(_user.Email) ? _user.Email.FirstOrDefault().ToString().ToUpperInvariant() : "U");
                if (temp != null)
                {
                    _avatar = temp;
                }
                _companyList = (await CompanyService.GetAllCompaniesAsync()).OrderBy(x => x.Name).ToList();
                _departmentList = (await CompanyService.GetAllDepartmentsAsync()).OrderBy(x => x.Name).ToList();

                _editUser = new User
                {
                    Id = _user.Id,
                    Email = _user.Email,
                    Name = _user.Name,
                    PhoneNumber = _user.PhoneNumber,
                    Department = _user.Department,
                    JobTitle = _user.JobTitle,
                    UserGroup = _user.UserGroup,
                    Company = _user.Company
                };

                if (_editUser.CompanyId == null && _companyList.Any())
                {
                    _editUser.CompanyId = _companyList.First().Id;
                }
            }
        }
    }

    private void EnableEdit()
    {
        _editMode = true;
    }

    private async Task SaveAsync()
    {
        await using var transaction = await _context.Database.BeginTransactionAsync();
        try
        {
            _editUser.DepartmentId = _editUser.Department?.Id;
            _editUser.CompanyId = _editUser.Company?.Id;
            User? updated = await UserService.UpdateUserAsync(_editUser);
            if (updated == null)
            {
                Snackbar.Add("更新信息失败", Severity.Error);
                return;
            }

            if (_editUser.DepartmentId != null)
            {
                Guid userId = _editUser.Id;
                int deptId = (int)_editUser.DepartmentId!;

                // 如果该部门是项目组，则添加到 UserProjectGroup 表
                if (_editUser.Department?.IsProjectGroup == true)
                {
                    await UserService.EnsureUserProjectGroupAsync(userId, deptId);
                }
            }
            await transaction.CommitAsync();
            _user = updated!;
            _editMode = false;
            Snackbar.Add("更新信息成功", Severity.Success);
        }
        catch
        {
            await transaction.RollbackAsync();
            Snackbar.Add("更新信息失败", Severity.Error);
        }
    }

    private void CancelEdit()
    {
        _editMode = false;
    }

    private void FilterDepartments()
    {
        if (_editUser.CompanyId != null)
        {
            _filteredDepartments = _departmentList.Where(d => d.Company == _editUser.Company).ToList();

            // 如果用户未设置部门，默认选中部门列表的第一个部门
            if (_editUser.DepartmentId == null && _filteredDepartments.Any())
            {
                _editUser.DepartmentId = _filteredDepartments.First().Id;
            }
        }
        else
        {
            _filteredDepartments = new();
            _editUser.DepartmentId = null;
        }
    }

    private Task<IEnumerable<Company>> SearchCompaniesAsync(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult(_companyList.AsEnumerable());

        var result = _companyList
        .Where(c => c.Name.Contains(value, StringComparison.OrdinalIgnoreCase));

        return Task.FromResult(result);
    }

    private Task<IEnumerable<Department>> SearchDepartmentsAsync(string value, CancellationToken cancellationToken)
    {
        if (_editUser.CompanyId == null)
            return Task.FromResult(Enumerable.Empty<Department>());

        _filteredDepartments = _departmentList
        .Where(d => d.CompanyId == _editUser.Company?.Id)
        .ToList();

        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult(_filteredDepartments.AsEnumerable());

        var result = _filteredDepartments
        .Where(d => d.Name.Contains(value, StringComparison.OrdinalIgnoreCase));

        return Task.FromResult(result);
    }

    private void OnCompanySelected(Company selectedCompany)
    {
        _editUser.CompanyId = selectedCompany?.Id;
        _editUser.Company = selectedCompany;
        _editUser.Department = null;
        _editUser.DepartmentId = null;
        StateHasChanged();
    }
}