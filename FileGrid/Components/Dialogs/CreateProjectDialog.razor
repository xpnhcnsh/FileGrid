@using FileGrid.Entities
@using FileGrid.Services.Interface
@using FileGrid.Utils.Class
@using FileGrid.Utils.Enum
@inject IDialogService DialogService
@inject ICompanyService CompanyService
@inject IUserService UserService
@inject IProjectService ProjectService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form">
            <MudTextField @bind-Value="_newProject.Name" Label="项目名称" Required />
            <MudTextField @bind-Value="_newProject.Description" Label="项目描述" Lines="3" />
            <MudAutocomplete T="Department" Label="项目组" ToStringFunc="c => c?.Name" SearchFunc="SearchProjectGroups"
                @bind-Value="_selectedProjectGroup" Required Clearable="true" />

            <MudAutocomplete T="Company" Label="甲方公司" ToStringFunc="c => c?.Name" SearchFunc="SearchPartAs"
                @bind-Value="_selectedPartA" Required Clearable="true" />

            <MudSelect T="Company" Label="外协公司" @bind-SelectedValues="_selectedOutsourceCompanies" MultiSelection="true"
                Dense="true" ToStringFunc="c => c?.Name" Required Clearable="true">
                @foreach (var company in _outSourceList)
                {
                    <MudSelectItem Value="@company">@company.Name</MudSelectItem>
                }
            </MudSelect>

            <MudAutocomplete T="User" Label="项目经理" ToStringFunc="u => u?.Name" SearchFunc="SearchCCTEGEmployees"
                @bind-Value="_selectedManager" Required Clearable="true" />

            <MudAutocomplete T="User" Label="项目副经理" ToStringFunc="u => u?.Name" SearchFunc="SearchCCTEGEmployees"
                @bind-Value="_selectedDeputyManager" Clearable="true" />

            <MudAutocomplete T="User" Label="技术负责" ToStringFunc="u => u?.Name" SearchFunc="SearchCCTEGEmployees"
                @bind-Value="_selectedTechnical" Required Clearable="true" />

            <MudAutocomplete T="User" Label="生产负责" ToStringFunc="u => u?.Name" SearchFunc="SearchCCTEGEmployees"
                @bind-Value="_selectedProduction" Required Clearable="true" />

            <MudAutocomplete T="User" Label="安全负责" ToStringFunc="u => u?.Name" SearchFunc="SearchCCTEGEmployees"
                @bind-Value="_selectedSafety" Required Clearable="true" />
        </MudForm>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Default">取消</MudButton>
        <MudButton OnClick="Save" Color="Color.Primary" Variant="Variant.Filled">保存</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = default!;

    private MudForm _form;
    private Project _newProject = new();
    private Company? _selectedPartA;
    private Department? _selectedProjectGroup;
    private IEnumerable<Company> _selectedOutsourceCompanies = new HashSet<Company> { };
    private User? _selectedManager;
    private User? _selectedDeputyManager;
    private User? _selectedTechnical;
    private User? _selectedProduction;
    private User? _selectedSafety;
    private List<Company> _partAList = [];
    private List<Company> _outSourceList = [];
    private List<User> _cctegEmployeeList = [];
    private List<Department> _ProjectGroupList = [];

    protected override async Task OnInitializedAsync()
    {
        _partAList = await CompanyService.GetAllPartACompaniesAsync();
        _outSourceList = await CompanyService.GetAllOutSourceCompaniesAsync();
        _cctegEmployeeList = await UserService.GetCCTEGEmployeesAsync();
        _ProjectGroupList = await CompanyService.GetAllProjectGroupsAsync();
        base.OnInitialized();
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Save()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            _newProject.PartAId = _selectedPartA?.Id;
            _newProject.ProjectGroupId = _selectedProjectGroup?.Id ?? 0;
            _newProject.ManagerId = _selectedManager?.Id;
            _newProject.DeputyManagerId = _selectedDeputyManager?.Id;
            _newProject.TechnicalLeaderId = _selectedTechnical?.Id;
            _newProject.ProductionLeaderId = _selectedProduction?.Id;
            _newProject.SafetyLeaderId = _selectedSafety?.Id;
            var outsourceIds = _selectedOutsourceCompanies.Select(c => c.Id);
            _newProject.Outsources = outsourceIds.Select(id => new ProjectOutsource
            {
                ProjectId = _newProject.Id,
                OutsourceId = id
            }).ToList();

            var errorCode = ProjectService.ValidateAProject(_newProject);
            if (errorCode != ErrorCode.None)
            {
                Snackbar.Add(ErrorCodeHelper.GetErrorMessage(errorCode), Severity.Error);
                return;
            }

            bool res = await ProjectService.AddProjectAsync(_newProject);
            if (!res)
            {
                Snackbar.Add("网络或服务器原因添加项目失败", Severity.Error);
                return;
            }
            MudDialog.Close(DialogResult.Ok(res));
        }
    }

    private Task<IEnumerable<Company>> SearchPartAs(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult(_partAList.AsEnumerable());

        var res = _partAList.Where(c => c.Name.Contains(value, StringComparison.OrdinalIgnoreCase));
        return Task.FromResult(res.AsEnumerable());
    }
    private Task<IEnumerable<Department>> SearchProjectGroups(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult(_ProjectGroupList.AsEnumerable());

        var res = _ProjectGroupList.Where(c => c.Name.Contains(value, StringComparison.OrdinalIgnoreCase));
        return Task.FromResult(res.AsEnumerable());
    }

    private Task<IEnumerable<Company>> SearchOutSources(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult(_outSourceList.AsEnumerable());

        var res = _outSourceList.Where(c => c.Name.Contains(value, StringComparison.OrdinalIgnoreCase));
        return Task.FromResult(res.AsEnumerable());
    }

    private Task<IEnumerable<User>> SearchCCTEGEmployees(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult(_cctegEmployeeList.AsEnumerable());

        var res = _cctegEmployeeList.Where(u => u.Name.Contains(value, StringComparison.OrdinalIgnoreCase));
        return Task.FromResult(res.AsEnumerable());
    }
}
